//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameEntity {

    public Components.TilemapComponent tilemap { get { return (Components.TilemapComponent)GetComponent(GameComponentsLookup.Tilemap); } }
    public bool hasTilemap { get { return HasComponent(GameComponentsLookup.Tilemap); } }

    public GameEntity AddTilemap(UnityEngine.Tilemaps.Tilemap newValue) {
        var index = GameComponentsLookup.Tilemap;
        var component = (Components.TilemapComponent)CreateComponent(index, typeof(Components.TilemapComponent));
        component.value = newValue;
        AddComponent(index, component);
        return this;
    }

    public GameEntity ReplaceTilemap(UnityEngine.Tilemaps.Tilemap newValue) {
        var index = GameComponentsLookup.Tilemap;
        var component = (Components.TilemapComponent)CreateComponent(index, typeof(Components.TilemapComponent));
        component.value = newValue;
        ReplaceComponent(index, component);
        return this;
    }

    public GameEntity RemoveTilemap() {
        RemoveComponent(GameComponentsLookup.Tilemap);
        return this;
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class GameMatcher {

    static Entitas.IMatcher<GameEntity> _matcherTilemap;

    public static Entitas.IMatcher<GameEntity> Tilemap {
        get {
            if (_matcherTilemap == null) {
                var matcher = (Entitas.Matcher<GameEntity>)Entitas.Matcher<GameEntity>.AllOf(GameComponentsLookup.Tilemap);
                matcher.componentNames = GameComponentsLookup.componentNames;
                _matcherTilemap = matcher;
            }

            return _matcherTilemap;
        }
    }
}
